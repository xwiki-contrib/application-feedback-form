<?xml version="1.1" encoding="UTF-8"?>

<xwikidoc version="1.5" reference="FeedbackFormCode.FeedbackForm" locale="">
  <!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

  <web>FeedbackFormCode</web>
  <name>FeedbackForm</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <originalMetadataAuthor>xwiki:XWiki.Admin</originalMetadataAuthor>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#macro(validateFeedbackFormData $isValid)
  #set ($macro.isValid = true)
  #set ($macro.mandatoryFields = ['feedbackType', 'feedbackUserTitle', 'feedbackUserFirstName', 'feedbackUserLastName', 'feedbackUserEmail', 'feedbackSubject', 'feedbackMessage'])
  #set ($macro.allowedFilextensions = ['jpg', 'jpeg', 'png', 'pdf'])
  #foreach($fieldName in $macro.mandatoryFields)
    #if ("$!request.get($fieldName)" == '')
      #set ($macro.isValid = false)
      #break
    #end
  #end
  #if ($macro.isValid)
    #if ("$!xwiki.fileupload.getFileItems()" != '' &amp;&amp; $xwiki.fileupload.getFileItems().size() &gt; 0)
      #foreach($item in $xwiki.fileupload.getFileItems())
        #set ($fileExtension = $item.name.substring($mathtool.add($item.name.lastIndexOf("."), 1)))
        #set ($fileMaxSize = 5242880) ## 5242880 = 5 * 1024 * 1024 = 5MB
        #if ($item.fieldName == 'feedbackFile' &amp;&amp; "$!item.name" != '' &amp;&amp; (!$macro.allowedFilextensions.contains($fileExtension) || $item.getSize() &gt; $fileMaxSize))
          #set ($macro.isValid = false)
          #break
        #end
      #end
    #end
  #end
  #set ($isValid = $NULL)
  #setVariable("$isValid" $macro.isValid)
#end

#macro(checkEmailSendingStatus $mailResultObj $emailStatus)
  #set ($macro.emailStatus = true)
  ## Check if the message was created properly and if we have permissions to send emails
  #set ($macro.emailErrorMessage = "An error occurred while sending feedback form email, Error : {}")
  #if ($services.mail.sender.lastError)
    #set ($macro.emailStatus = false)
    #set ($discard = $logger.error($macro.emailErrorMessage, $exceptiontool.getStackTrace($services.mail.sender.lastError)))
  #end
  ## Check if the mail we tried to send has failed to be sent
  #set ($macro.statuses = $mailResultObj.statusResult.getAllErrors())
  #if ($macro.statuses.hasNext())
    #set ($macro.status = $macro.statuses.next())
    #set ($macro.emailStatus = false)
    #set ($discard = $logger.error($macro.emailErrorMessage, "$macro.status.errorSummary ($macro.status.state) $macro.status.errorDescription"))
  #end
  #set ($emailStatus = $NULL)
  #setVariable("$emailStatus" $macro.emailStatus)
#end

#macro(getSenderEmail $senderEmail)
  #set ($feedbackFormConfigurationObj = $xwiki.getDocument('FeedbackFormCode.Configuration').getObject('FeedbackFormCode.ConfigurationClass'))
  #set ($macro.email = $feedbackFormConfigurationObj.getProperty('platformSenderEmail').value)
  #if ("$!macro.email" == '')
    #set ($macro.email = $services.mail.sender.configuration.fromAddress)
  #end
  #set ($senderEmail = $NULL)
  #setVariable("$senderEmail" $macro.email)
#end

#macro(getFeedbackRecipientEmail $recipientEmail)
  #set ($feedbackFormConfigurationObj = $xwiki.getDocument('FeedbackFormCode.Configuration').getObject('FeedbackFormCode.ConfigurationClass'))
  #set ($macro.email = $feedbackFormConfigurationObj.getProperty('feedbackRecipientEmail').value)
  #if ("$!macro.email" == '')
    #set ($macro.email = $services.mail.sender.configuration.fromAddress)
  #end
  #set ($recipientEmail = $NULL)
  #setVariable("$recipientEmail" $macro.email)
#end

#macro(sendMail $velocityVariables)
  #set ($macro.templateReference = $services.model.createDocumentReference('', 'FeedbackFormCode', 'FeedbackFormMailTemplate'))
  #set ($macro.mailParameters = {'language' : 'en', 'velocityVariables' : $velocityVariables})
  ## Add the attachment to the mail
  #if ("$!xwiki.fileupload.getFileItems()" != '' &amp;&amp; $xwiki.fileupload.getFileItems().size() &gt; 0)
    #foreach($item in $xwiki.fileupload.getFileItems())
      #if ($item.fieldName == 'feedbackFile' &amp;&amp;  "$!item.name" != '')
        #set ($macro.tempDoc = $xwiki.getDocument('FeedbackFormCode.FeedbackForm'))
        #set ($macro.attachment = $macro.tempDoc.addAttachment($item.name, $item.inputStream))
        #set ($discard = $macro.mailParameters.put('attachments', [$macro.attachment]))
        #break
      #end
    #end
  #end
  ##
  #getSenderEmail($senderEmail)
  #getFeedbackRecipientEmail($feedbackRecipientEmail)
  #set ($macro.message = $services.mail.sender.createMessage('template', $macro.templateReference, $macro.mailParameters))
  #set ($discard = $macro.message.setFrom($senderEmail))
  #set ($discard = $macro.message.addRecipient('to', $feedbackRecipientEmail))
  #set ($mailResult = $services.mail.sender.send($macro.message))
  #checkEmailSendingStatus($mailResult $emailSent)
  #if ($emailSent)
    $jsontool.serialize({"status" : true, "message" : $services.localization.render('feedbackform.confirmationMessage')})
    ## Send email to user who added the feedback
    #set ($discard = $macro.mailParameters.velocityVariables.put('mailRecipient', 'user'))
    #set ($discard = $macro.mailParameters.velocityVariables.put('environment', false))
    #set ($macro.message = $services.mail.sender.createMessage('template', $macro.templateReference, $macro.mailParameters))
    #set ($discard = $maloadFeedbackFormcro.message.setFrom($senderEmail))
    #set ($discard = $macro.message.addRecipient('to', $request.feedbackUserEmail))
    #set ($mailResult = $services.mail.sender.send($macro.message))
    #checkEmailSendingStatus($mailResult $emailSent)
  #else
    $jsontool.serialize({"status" : false, "message" : $services.localization.render('feedbackform.sendingFeedbackError')})
  #end
#end

#macro(submitFeedback)
  $response.setContentType('application/json')
  #set ($type = $request.type)
  #set ($feedbackTypeObj = $xwiki.getDocument($type).getObject("FeedbackFormCode.FeedbackTypeClass"))
  #if(!$!feedbackTypeObj)
    {"status": false, "message": "Error: Wrong feedback type."}
    #break
  #end
  #set ($shortType = $feedbackTypeObj.getValue("type"))
  ## #validateFeedbackFormData($doSend)
  ## #if (!$doSend)
  ##   $jsontool.serialize({"status" : false, "message" : $services.localization.render('feedbackform.invalidFormData')})
  ##   #break
  ## #end
  #set ($config = $xwiki.getDocument("FeedbackFormCode.Configuration").getObject("FeedbackFormCode.ConfigurationClass"))
  #set ($space = "${config.getValue('feedbackSpace')}.$shortType")
  #set ($date = $xwiki.jodatime.getDateTime().toString('YYY-MM-dd_HH\:mm\:ss'))
  #set ($user = $xcontext.user)
  #set ($escapedUser = $stringtool.replace($user, ".", "\."))
  #set ($feedbackDoc = $xwiki.getDocument("$space", "${space}.${date}-${escapedUser}"))
  #set ($discard = $feedbackDoc.addObjectFromRequest("FeedbackFormCode.FeedbackMetadataClass"))
  #set ($feedbackMetadata = $feedbackDoc.getObject("FeedbackFormCode.FeedbackMetadataClass"))
  $feedbackMetadata.set("reporter", $user)
  $feedbackMetadata.set("type", $type)
  #set ($discard = $feedbackDoc.addObjectFromRequest($type))
  #set ($validateAndCustomizeSubmission = $feedbackTypeObj.getValue("validateAndCustomizeSubmission"))
  #if ("$!validateAndCustomizeSubmission" != "")
    #evaluate($validateAndCustomizeSubmission)
  #end
  #if("$!cancelSubmission" != "")
    {"status": false, "message": $jsontool.serialize("$!cancelSubmission")}
    #break
  #end
  #set ($discard = $feedbackDoc.save())
  #if (!$!services.localization.get("feedbackform.${shortType}.confirmationMessage"))
    {"status": true, "message": $jsontool.serialize($services.localization.render('feedbackform.confirmationMessage'))}
  #else
     {"status": true, "message": $jsontool.serialize($services.localization.render("feedbackform.${shortType}.confirmationMessage"))
  #end
##   ## Send a mail to wiki and to the user who added the feedback with a summary of the feedback
##   #set ($velocityVariables = {
##     'feedbackType' : $request.feedbackType,
##     'feedbackUserTitle' : $request.feedbackUserTitle,
##     'feedbackUserFirstName' : $request.feedbackUserFirstName,
##     'feedbackUserLastName' : $request.feedbackUserLastName,
##     'feedbackUserEmail' : $request.feedbackUserEmail,
##     'feedbackSubject' : $request.feedbackSubject,
##     'feedbackMessage' : $request.feedbackMessage,
##     'contextLocale' : $xcontext.locale,
##     'pageURL' : $request.pageURL,
##     'referrer' : $request.referrer,
##     'userAgent' : $request.userAgent,
##     'screenResolution' : $request.screenResolution,
##     'mailRecipient' : 'wiki'
##   })
##   #if ("$!request.referrer" != '' ||
##     "$!request.userAgent" != '' ||
##     "$!request.screenResolution" != '')
##      #set ($discard = $macro.velocityVariables.put('environment', true))
##   #end
##   #sendMail($velocityVariables)
#end
{{/velocity}}

{{velocity}}
#set ($action = $request.action)
#if($action == 'load')
  #set ($type = "$!request.type")
  #if ("$type" == "")
    #set($type = $xwiki.getDocument("FeedbackFormCode.Configuration").getValue("publicFeedbackTypes")[0])
  #end
  #set ($typeDoc = $xwiki.getDocument($type))
  #set ($typeSheet = $typeDoc.getObject('XWiki.ClassSheetBinding').getValue('sheet'))
  #set ($config = $typeDoc.getObject('FeedbackFormCode.FeedbackTypeClass'))
  #set ($discard = $xcontext.setDisplayMode('edit'))
  {{html clean=false wiki=true}}##
  &lt;div
    id="feedback-modal-body-root"
    data-suggest-sending-browser-env="$config.getValue('suggestSendingBrowserEnv')"
    data-send-url="$config.getValue('sendURL')"
    data-allowed-file-upload-max-number="$config.getValue('allowedFileUploadMaxNumber')"
    data-allowed-file-upload-max-size="$config.getValue('allowedFileUploadMaxSize')"
    data-allowed-file-upload-types="$stringtool.join($config.getValue('allowedFileUploadTypes'), ',')"
    data-file-upload-required="$config.getValue('fileUploadRequired')"
  &gt;{{display reference="$typeSheet" /}}&lt;/div&gt;##
  {{/html}}
#elseif($action == 'submit')
  #submitFeedback()
#end
{{/velocity}}
</content>
  <attachment>
    <filename>download.gif</filename>
    <mimetype>image/gif</mimetype>
    <author>xwiki:XWiki.Admin</author>
    <version>1.1</version>
    <comment/>
    <content>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</content>
    <filesize>1553</filesize>
  </attachment>
  <object>
    <name>FeedbackFormCode.FeedbackForm</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>0d66b826-7a52-4f6f-a6e9-d4972f49a362</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>/* #set($config = $xwiki.getDocument('FeedbackFormCode.Configuration').getObject('FeedbackFormCode.ConfigurationClass'))
   #if("$config.getProperty('enabled').value" == "0") Feedback is not enabled #else */

require(['jquery'], function($) {
  "use strict";

  const GENERAL_FEEDBACK_CLASS_NAME = "FeedbackFormCode.FeedbackMetadataClass";
  const FILE_SIZE_UNITS = [
    "$services.localization.render('feedbackform.fileSizeUnit.B')",
    "$services.localization.render('feedbackform.fileSizeUnit.KB')",
    "$services.localization.render('feedbackform.fileSizeUnit.MB')",
    "$services.localization.render('feedbackform.fileSizeUnit.GB')",
  ];

  let ckeditor = null;
  let ckInstances = [];
  let dataset = null;

  function humanSize(size) {
    let unitIndex = 0;
    while (size &gt;= 1024 &amp;&amp; unitIndex &lt; FILE_SIZE_UNITS.length) {
      unitIndex++;
      size /= 1024;
    }

    return Math.floor(size) + ' ' + FILE_SIZE_UNITS[unitIndex];
  }

  function getFeedbackModal(displayedTitle) {
    $("#feedback-modal").remove()
    const title = displayedTitle || $jsontool.serialize($services.localization.render('feedbackform.title'));
    const type = $jsontool.serialize($services.localization.render('feedbackform.type'));
    const consentMessage = $jsontool.serialize($services.localization.render('feedbackform.consentMessage'));
    const sendFeedback = $jsontool.serialize($services.localization.render('feedbackform.sendFeedback'));
    const feedbackModal = $(`
      &lt;div id="feedback-modal" class="modal fade" role="dialog"&gt;
        &lt;div class="modal-dialog modal-lg"&gt;
          &lt;div class="modal-content"&gt;
            &lt;div class="modal-header"&gt;
              &lt;button type="button" class="close" data-dismiss="modal"&gt;×&lt;/button&gt;
              &lt;h4 class="modal-title"&gt;#[[${title}]]#&lt;/h4&gt;
            &lt;/div&gt;
            &lt;form id="feedback-form" enctype="multipart/form-data"&gt;
              &lt;div class="modal-body"&gt;
                &lt;div id="feedback-modal-type-choice" class="form-group"&gt;
                  &lt;label for="feedbackTypeChoice"&gt;#[[${type}]]#&lt;/label&gt;
                  &lt;select class="form-control" id="feedbackTypeChoice"&gt;
                    #foreach($type in $config.getValue('publicFeedbackTypes'))
                      &lt;option value="$escapetool.xml($type).replace('$', '&amp;#36;').replace('\', '&amp;#92;')"&gt;
                        $escapetool.xml($xwiki.getDocument($type).getObject('FeedbackFormCode.FeedbackTypeClass').getValue("type")).replace('$', '&amp;#36;').replace('\', '&amp;#92;')
                      &lt;/option&gt;
                    #end
                  &lt;/select&gt;
                &lt;/div&gt;
                &lt;div id="feedback-modal-content"&gt;&lt;/div&gt;
                &lt;p id="feedback-file-group"&gt;&lt;/p&gt;
                &lt;p class="form-group" id="feedback-modal-browser-env"&gt;
                  &lt;label class="checkbox-inline"&gt;
                    &lt;input type="checkbox" name="" id="provideBrowserData" /&gt;
                    ${consentMessage}
                  &lt;/label&gt;
                &lt;/p&gt;
              &lt;/div&gt;
              &lt;div class="modal-footer"&gt;
                &lt;button type="submit" class="btn btn-primary pull-left" id="submitFeedbackButton"&gt;
                  ${sendFeedback}
                &lt;/button&gt;
              &lt;/div&gt;
              &lt;input type="hidden" name="type" id="feedback-modal-type" /&gt;
            &lt;/form&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;`
    );

    $('body').append(feedbackModal);
    $('#feedback-form').submit(function(event) {
      event.preventDefault();
      for (const instance of ckInstances) {
        instance.updateElement();
      }

      const fileInput = document.getElementById("feedback-modal-file");
      const allowedFileUploadMaxSize = parseInt(dataset.allowedFileUploadMaxSize) || 0;
      const allowedFileUploadMaxNumber = parseInt(dataset.allowedFileUploadMaxNumber) || 0;
      if (fileInput) {
        const fileCount = fileInput.files.length;
        if (allowedFileUploadMaxNumber !== -1 &amp;&amp; fileCount &gt; allowedFileUploadMaxNumber) {
          new XWiki.widgets.Notification(
            "$services.localization.render('feedbackform.tooManyFiles')"
              .replace("{0}", fileCount)
              .replace("{1}", allowedFileUploadMaxNumber),
            "error"
          );
          return;
        }

        if (allowedFileUploadMaxSize !== -1) {
          let size = 0;

          for (const file of fileInput.files) {
            size += file.size;
          }

          if (size &gt; allowedFileUploadMaxSize) {
            const msg = (
              allowedFileUploadMaxNumber === 1
                ? "$services.localization.render('feedbackform.maxFileSizeExceededOne')"
                : "$services.localization.render('feedbackform.maxFileSizeExceededSeveral')"
            )
            .replace("{0}", humanSize(size))
            .replace("{1}", humanSize(allowedFileUploadMaxSize));

            new XWiki.widgets.Notification(msg, "error");
            return;
          }
        }

        let okToSubmit = true;

        // Unfortunately, browsers (at least Chromium and Firefox) don't seem to
        // actually validate the types of the files. Chromium actually correctly
        // set the filter in the file dialog on KDE. Firefox does not.
        // So let's do it ourselves. Worst case it is already done by the
        // browser and this code is a no-op (if it has no bugs, of course).

        $('#feedback-form input[type="file"][accept]').each(function () {
          if (!okToSubmit) return;

          const acceptedTypes = this.accept.split(",");

          for (const file of this.files) {
            let accepted = false;
            for (let acceptedType of acceptedTypes) {
              acceptedType = acceptedType.trim();
              if (acceptedType.startsWith(".")) {
                if (file.name.endsWith(acceptedType)) {
                  accepted = true;
                }
              } else if (acceptedType.includes("/")) {
                if (acceptedType.includes("*")) {
                  const acceptedTypeRE = new RegExp("^" + (
                    acceptedType
                      .replaceAll("*", ".*")
                      .replaceAll("+", "\\+")
                  ) + "$");

                  if (acceptedTypeRE.test(file.type)) {
                    accepted = true;
                  }
                } else if (file.type === acceptedType) {
                  accepted = true;
                }
              } else {
                console.error(
                  "Unrecognized accepted file type '" + acceptedType + "'. " +
                  "Recognized types: MIME types like 'image/png', " +
                  "patterns like 'image/*', or file extensions like '.png'"
                );
              }
            }

            if (!accepted) {
              new XWiki.widgets.Notification(
                "$services.localization.render('feedbackform.incorrectFileType')"
                  .replaceAll(
                    '{0}',
                    this.accept
                      .replace(/,[\s]*/, ", ")
                      .replaceAll("image/*", "images"),
                  ),
                "error"
              );
              okToSubmit = false;
            }
          }
        });

        // Unfortunately, CKEditor's required event does not seem to work here
        // https://ckeditor.com/docs/ckeditor4/latest/api/CKEDITOR_editor.html#event-required
        // The corresponding textareas lose their required attributes when replacing them
        // with CKEditor. Which is unexpected.
        // The following code block works around this issue.
        feedbackModal.find('[data-feedback-required-field] textarea').each(function () {
          if (okToSubmit &amp;&amp; !(new DOMParser().parseFromString(this.value, "text/html").documentElement.textContent.trim())) {
            new XWiki.widgets.Notification(
              "$services.localization.render('feedbackform.wysiwygFieldRequired')",
              "error"
            );

            okToSubmit = false;
          }
        });

        if (!okToSubmit) {
          return;
        }
      }

      submitFeedbackForm(this, feedbackModal);
    });

    return feedbackModal.modal();
  }

  function displayFileMax(maxNumber, maxSize) {
    let label = "";
    if (maxNumber &gt; 1 || maxSize &gt; -1) {
      label = " ($services.localization.render('feedbackform.labelMax') ";
    }

    if (maxNumber &gt; 1) {
      label += "$services.localization.render('feedbackform.labelFiles', ['{0}'])".replace("{0}", maxNumber);
      if (maxSize &gt; -1) {
        label += ", ";
      }
    }

    if (maxSize &gt; -1) {
      label += humanSize(maxSize);
    }

    if (label) {
      return label + ")";
    }

    return "";
  }

  function showFeedbackButton() {
    $('body').append(`
      &lt;a href="#" id="feedback-button" class="feedback-button"&gt;
        $services.localization.render('feedbackform.buttonLabel')
      &lt;/a&gt;
      &lt;div id="fade-bg" class="feedback-form-fade-bg" style="display:none"&gt;&lt;/div&gt;
      &lt;div id="feedback-form-loading" class="feedback-form-loading" tabindex="0" style="display:none"&gt;&lt;/div&gt;
    `);
  };

  function feedbackUrl(action, plain, params) {
    return new XWiki.Document('FeedbackForm', 'FeedbackFormCode').getURL('get',
      'action=' + action +
      (plain ? '&amp;xpage=plain&amp;outputSyntax=plain' : '') +
      (params ? '&amp;' + $.param(params) : "") +
      '&amp;language=${xcontext.language}'
    );
  }

  function showLoader() {
    $('#fade-bg').show();
    $('#feedback-form-loading').show();
  };

  function hideLoader() {
    $('#fade-bg').hide();
    $('#feedback-form-loading').hide();
  };

  function enableCKEditor(textareas) {
    if (!ckeditor) {
      require(['deferred!ckeditor'], function (ckeditorPromise) {
        ckeditorPromise.done((ck) =&gt; {
          ckeditor = ck;
          enableCKEditor(textareas);
        })
      });

      return;
    }

    textareas.each(function () {
      const instance = ckeditor.replace(this);
      ckInstances.push(instance);
    });
  }

  function isFalse(val) {
    return val === false || val === 0 || val === "false" || val === "0";
  }

  function cleanCKEditor() {
    while (ckInstances.length) {
      const instance = ckInstances.pop();
      instance.resetDirty(); // prevents bogus "are you sure to leave?" message
      ckeditor.remove(instance);
    }
  }

  function showFeedbackForm(config = {}) {
    showLoader();
    $.get(feedbackUrl('load', false, {type: config.type}), function(data) {
      data = $(data);

      const feedbackModal = getFeedbackModal(config.modalTitle);
      const content = $('#feedback-modal-content');
      content.empty().append(data);

      content.find("[data-feedback-required-field]").find("input,textarea").each(function () {
        this.required = true;
      });

      const ckTAs = content.find('.ckeditor-textarea');
      if (ckTAs.length) {
        enableCKEditor(ckTAs);
      }

      const typeChoice = document.getElementById("feedbackTypeChoice");
      const type = config.type || typeChoice.value;

      if (isFalse(config.allowFeedbackTypeChoice) || !typeChoice.querySelector("option+option")) {
        $("#feedback-modal-type-choice").hide()
      } else {
        $("#feedback-modal-type-choice").show()
      }

      dataset = data[0].dataset;

      if (isFalse(dataset.suggestSendingBrowserEnv)) {
        $("#feedback-modal-browser-env").hide().prop('checked', false);
      } else {
        $("#feedback-modal-browser-env").show();
      }

      const allowedFileUploadMaxNumber = parseInt(dataset.allowedFileUploadMaxNumber) || 0;
      const allowedFileUploadMaxSize = parseInt(dataset.allowedFileUploadMaxSize) || 0;
      if (dataset.allowedFileUploadTypes &amp;&amp; allowedFileUploadMaxNumber &amp;&amp; allowedFileUploadMaxSize) {
        const imagesAccepted = (
          dataset.allowedFileUploadTypes === "*" ||
          dataset.allowedFileUploadTypes.includes("image/*")
        );

        const fileGroup = document.getElementById('feedback-file-group');

        const fileLabel = document.createElement("label");
        fileLabel.textContent = (
          imagesAccepted
            ? (
              allowedFileUploadMaxNumber === 1
                ? "$services.localization.render('feedbackform.labelAttachFileOrImage')"
                : "$services.localization.render('feedbackform.labelAttachFilesOrImages')"
            )
            : (
              allowedFileUploadMaxNumber === 1
                ? "$services.localization.render('feedbackform.labelAttachFile')"
                : "$services.localization.render('feedbackform.labelAttachFiles')"
            )
        ) + displayFileMax(allowedFileUploadMaxNumber, allowedFileUploadMaxSize);

        const fileInput = document.createElement('input');
        fileInput.type = "file";

        if (dataset.allowedFileUploadTypes !== '*') {
          fileInput.accept = dataset.allowedFileUploadTypes;
        }

        if (!isFalse(dataset.fileUploadRequired)) {
          fileInput.required = true;
        }

        if (allowedFileUploadMaxSize &gt; 1) {
          fileInput.multiple = true;
        }

        fileLabel.for = fileInput.id = "feedback-modal-file";
        fileGroup.appendChild(fileLabel);
        fileGroup.appendChild(fileInput);
      }

      feedbackModal.one('hidden.bs.modal', cleanCKEditor);

      document.getElementById("feedback-modal-type").value = type;
    })
    .always(hideLoader);
  };

  function showMessage(feedbackFormModal, messageType, message) {
    $('.modal-body', feedbackFormModal).replaceWith(
      $('&lt;div class="box ' + messageType + 'message"&gt;').text(message)
    );
    cleanCKEditor();
  }

  function submitFeedbackForm(feedbackForm, feedbackFormModal) {
    const formData = new FormData(feedbackForm);

    if (!isFalse(document.getElementById("feedback-modal-body-root").dataset.sendUrl)) {
      formData.append(GENERAL_FEEDBACK_CLASS_NAME + '_0_url', location.href);
      formData.append(GENERAL_FEEDBACK_CLASS_NAME + '_0_page', XWiki.currentDocument.documentReference.toString());
    }

    if (document.getElementById('provideBrowserData').checked) {
      formData.append(GENERAL_FEEDBACK_CLASS_NAME + '_0_referrer', document.referrer);
      formData.append(GENERAL_FEEDBACK_CLASS_NAME + '_0_userAgent', navigator.userAgent);
      formData.append(GENERAL_FEEDBACK_CLASS_NAME + '_0_screenResolution', screen.width + 'x' + screen.height);
    }

    showLoader();

    $.post({
      url: feedbackUrl('submit', true),
      data: formData,
      contentType: false,
      processData: false,
    })
    .done(function(data) {
      console.log("data", data);
      if (data.status) {
        showMessage(feedbackFormModal, 'info', data.message)
        $('#submitFeedbackButton').remove();
      } else {
        new XWiki.widgets.Notification(data.message, "error");
      }
    })
    .fail(function(jqXHR, textStatus, errorThrown) {
      showMessage(feedbackFormModal, 'error', "$services.localization.render('feedbackform.submitError') " + errorThrown);
      console.error(errorThrown);
    })
    .always(hideLoader);
  }

  $(document).ready(function() {
    /* #if("$config.getProperty('generalButtonEnabled').value" == '1') */
    showFeedbackButton();
    /* #end */

    $('.showFeedbackForm, #feedback-button').click(function(event) {
      event.preventDefault();
      showFeedbackForm(event.currentTarget.dataset);
    });
  });
});
// #end
</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>always</use>
    </property>
  </object>
  <object>
    <name>FeedbackFormCode.FeedbackForm</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>1bbb1249-472c-4be5-887a-d394eea81e5f</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <freeText>forbidden</freeText>
        <largeStorage>0</largeStorage>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>.feedback-button {
  background: @btn-primary-bg;
  border: 2px solid white;
  border-radius: 0 0 5px 5px;
  -webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
  border-top: none;
  color: @btn-primary-color;
  display: block;
  font-size: 12px;
  font-weight: bold;
  left: 100%;
  padding: 5px;
  position: fixed;
  top: 40%;
  transform: rotate(90deg);
  transform-origin: top left;
  text-decoration: none !important;
  white-space: nowrap;
  z-index: 300;
}

.feedback-form-fade-bg {
  background: black;
  height: 100%;
  left: 0;
  opacity: .5;
  position: fixed;
  top: 0;
  width: 100%;
  z-index: 1000000;
}

.feedback-form-loading {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  margin: auto;
  height: 40px;
  width: 40px;
  z-index: 1000001;
  border-radius: 5px;
  background-color: #fff;
  background-image: url("$doc.getAttachmentURL('download.gif')");
  background-repeat: no-repeat;
  background-position: center center;
}

body.modal-open {
  overflow-y: hidden !important;
}

#feedback-modal label.d-block {
  display: block;
}

#feedback-modal input[type="text"], #feedback-modal input[type="email"] {
  width: 100%;
}

#feedback-modal label span.mandatory-field {
  color: red;
}

#feedback-modal .box {
  line-height: 30px;
}

#feedback-modal .checkbox-inline {
  font-weight: 700;
}

#feedback-modal .checkbox-inline input[type='checkbox'] {
  bottom: 2px;
}
</code>
    </property>
    <property>
      <contentType>LESS</contentType>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>always</use>
    </property>
  </object>
</xwikidoc>
